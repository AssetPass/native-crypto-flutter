// Copyright 2019-2023 Hugo Pointcheval
// 
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// --
// Autogenerated from Pigeon (v9.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'messages.g.dart';

abstract class TestNativeCryptoAPI {
  static TestDefaultBinaryMessengerBinding? get _testBinaryMessengerBinding => TestDefaultBinaryMessengerBinding.instance;
  static const MessageCodec<Object?> codec = StandardMessageCodec();

  Uint8List? hash(Uint8List data, HashAlgorithm algorithm);

  Uint8List? hmac(Uint8List data, Uint8List key, HashAlgorithm algorithm);

  Uint8List? generateSecureRandom(int length);

  Uint8List? pbkdf2(Uint8List password, Uint8List salt, int length, int iterations, HashAlgorithm algorithm);

  Uint8List? encrypt(Uint8List plainText, Uint8List key, CipherAlgorithm algorithm);

  Uint8List? encryptWithIV(Uint8List plainText, Uint8List iv, Uint8List key, CipherAlgorithm algorithm);

  Uint8List? decrypt(Uint8List cipherText, Uint8List key, CipherAlgorithm algorithm);

  bool? encryptFile(String plainTextPath, String cipherTextPath, Uint8List key, CipherAlgorithm algorithm);

  bool? encryptFileWithIV(String plainTextPath, String cipherTextPath, Uint8List iv, Uint8List key, CipherAlgorithm algorithm);

  bool? decryptFile(String cipherTextPath, String plainTextPath, Uint8List key, CipherAlgorithm algorithm);

  static void setup(TestNativeCryptoAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.hash', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.hash was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_data = (args[0] as Uint8List?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hash was null, expected non-null Uint8List.');
          final HashAlgorithm? arg_algorithm = args[1] == null ? null : HashAlgorithm.values[args[1] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hash was null, expected non-null HashAlgorithm.');
          final Uint8List? output = api.hash(arg_data!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.hmac', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.hmac was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_data = (args[0] as Uint8List?);
          assert(arg_data != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hmac was null, expected non-null Uint8List.');
          final Uint8List? arg_key = (args[1] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hmac was null, expected non-null Uint8List.');
          final HashAlgorithm? arg_algorithm = args[2] == null ? null : HashAlgorithm.values[args[2] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hmac was null, expected non-null HashAlgorithm.');
          final Uint8List? output = api.hmac(arg_data!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final int? arg_length = (args[0] as int?);
          assert(arg_length != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom was null, expected non-null int.');
          final Uint8List? output = api.generateSecureRandom(arg_length!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.pbkdf2', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_password = (args[0] as Uint8List?);
          assert(arg_password != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null, expected non-null Uint8List.');
          final Uint8List? arg_salt = (args[1] as Uint8List?);
          assert(arg_salt != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null, expected non-null Uint8List.');
          final int? arg_length = (args[2] as int?);
          assert(arg_length != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null, expected non-null int.');
          final int? arg_iterations = (args[3] as int?);
          assert(arg_iterations != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null, expected non-null int.');
          final HashAlgorithm? arg_algorithm = args[4] == null ? null : HashAlgorithm.values[args[4] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null, expected non-null HashAlgorithm.');
          final Uint8List? output = api.pbkdf2(arg_password!, arg_salt!, arg_length!, arg_iterations!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encrypt', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encrypt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_plainText = (args[0] as Uint8List?);
          assert(arg_plainText != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encrypt was null, expected non-null Uint8List.');
          final Uint8List? arg_key = (args[1] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encrypt was null, expected non-null Uint8List.');
          final CipherAlgorithm? arg_algorithm = args[2] == null ? null : CipherAlgorithm.values[args[2] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encrypt was null, expected non-null CipherAlgorithm.');
          final Uint8List? output = api.encrypt(arg_plainText!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_plainText = (args[0] as Uint8List?);
          assert(arg_plainText != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null, expected non-null Uint8List.');
          final Uint8List? arg_iv = (args[1] as Uint8List?);
          assert(arg_iv != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null, expected non-null Uint8List.');
          final Uint8List? arg_key = (args[2] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null, expected non-null Uint8List.');
          final CipherAlgorithm? arg_algorithm = args[3] == null ? null : CipherAlgorithm.values[args[3] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null, expected non-null CipherAlgorithm.');
          final Uint8List? output = api.encryptWithIV(arg_plainText!, arg_iv!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.decrypt', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.decrypt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Uint8List? arg_cipherText = (args[0] as Uint8List?);
          assert(arg_cipherText != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decrypt was null, expected non-null Uint8List.');
          final Uint8List? arg_key = (args[1] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decrypt was null, expected non-null Uint8List.');
          final CipherAlgorithm? arg_algorithm = args[2] == null ? null : CipherAlgorithm.values[args[2] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decrypt was null, expected non-null CipherAlgorithm.');
          final Uint8List? output = api.decrypt(arg_cipherText!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encryptFile', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_plainTextPath = (args[0] as String?);
          assert(arg_plainTextPath != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null, expected non-null String.');
          final String? arg_cipherTextPath = (args[1] as String?);
          assert(arg_cipherTextPath != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null, expected non-null String.');
          final Uint8List? arg_key = (args[2] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null, expected non-null Uint8List.');
          final CipherAlgorithm? arg_algorithm = args[3] == null ? null : CipherAlgorithm.values[args[3] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null, expected non-null CipherAlgorithm.');
          final bool? output = api.encryptFile(arg_plainTextPath!, arg_cipherTextPath!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_plainTextPath = (args[0] as String?);
          assert(arg_plainTextPath != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV was null, expected non-null String.');
          final String? arg_cipherTextPath = (args[1] as String?);
          assert(arg_cipherTextPath != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV was null, expected non-null String.');
          final Uint8List? arg_iv = (args[2] as Uint8List?);
          assert(arg_iv != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV was null, expected non-null Uint8List.');
          final Uint8List? arg_key = (args[3] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV was null, expected non-null Uint8List.');
          final CipherAlgorithm? arg_algorithm = args[4] == null ? null : CipherAlgorithm.values[args[4] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFileWithIV was null, expected non-null CipherAlgorithm.');
          final bool? output = api.encryptFileWithIV(arg_plainTextPath!, arg_cipherTextPath!, arg_iv!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.decryptFile', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, null);
      } else {
        _testBinaryMessengerBinding!.defaultBinaryMessenger.setMockDecodedMessageHandler<Object?>(channel, (Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_cipherTextPath = (args[0] as String?);
          assert(arg_cipherTextPath != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null, expected non-null String.');
          final String? arg_plainTextPath = (args[1] as String?);
          assert(arg_plainTextPath != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null, expected non-null String.');
          final Uint8List? arg_key = (args[2] as Uint8List?);
          assert(arg_key != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null, expected non-null Uint8List.');
          final CipherAlgorithm? arg_algorithm = args[3] == null ? null : CipherAlgorithm.values[args[3] as int];
          assert(arg_algorithm != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null, expected non-null CipherAlgorithm.');
          final bool? output = api.decryptFile(arg_cipherTextPath!, arg_plainTextPath!, arg_key!, arg_algorithm!);
          return <Object?>[output];
        });
      }
    }
  }
}

// Copyright 2019-2023 Hugo Pointcheval
// 
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// --
// Autogenerated from Pigeon (v9.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, unnecessary_import
// ignore_for_file: avoid_relative_lib_imports
import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;
import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';
import 'package:flutter_test/flutter_test.dart';

import 'messages.pigeon.dart';

class _TestNativeCryptoAPICodec extends StandardMessageCodec {
  const _TestNativeCryptoAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DecryptFileRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DecryptFileResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is DecryptRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is DecryptResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is EncryptFileRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is EncryptFileResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is EncryptRequest) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is EncryptResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is EncryptWithIVRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is GenerateSecureRandomRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is GenerateSecureRandomResponse) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is HashRequest) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is HashResponse) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is HmacRequest) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is HmacResponse) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is Pbkdf2Request) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is Pbkdf2Response) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DecryptFileRequest.decode(readValue(buffer)!);
      case 129: 
        return DecryptFileResponse.decode(readValue(buffer)!);
      case 130: 
        return DecryptRequest.decode(readValue(buffer)!);
      case 131: 
        return DecryptResponse.decode(readValue(buffer)!);
      case 132: 
        return EncryptFileRequest.decode(readValue(buffer)!);
      case 133: 
        return EncryptFileResponse.decode(readValue(buffer)!);
      case 134: 
        return EncryptRequest.decode(readValue(buffer)!);
      case 135: 
        return EncryptResponse.decode(readValue(buffer)!);
      case 136: 
        return EncryptWithIVRequest.decode(readValue(buffer)!);
      case 137: 
        return GenerateSecureRandomRequest.decode(readValue(buffer)!);
      case 138: 
        return GenerateSecureRandomResponse.decode(readValue(buffer)!);
      case 139: 
        return HashRequest.decode(readValue(buffer)!);
      case 140: 
        return HashResponse.decode(readValue(buffer)!);
      case 141: 
        return HmacRequest.decode(readValue(buffer)!);
      case 142: 
        return HmacResponse.decode(readValue(buffer)!);
      case 143: 
        return Pbkdf2Request.decode(readValue(buffer)!);
      case 144: 
        return Pbkdf2Response.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

abstract class TestNativeCryptoAPI {
  static const MessageCodec<Object?> codec = _TestNativeCryptoAPICodec();

  HashResponse hash(HashRequest request);

  HmacResponse hmac(HmacRequest request);

  GenerateSecureRandomResponse generateSecureRandom(GenerateSecureRandomRequest request);

  Pbkdf2Response pbkdf2(Pbkdf2Request request);

  EncryptResponse encrypt(EncryptRequest request);

  DecryptResponse decrypt(DecryptRequest request);

  EncryptFileResponse encryptFile(EncryptFileRequest request);

  DecryptFileResponse decryptFile(DecryptFileRequest request);

  EncryptResponse encryptWithIV(EncryptWithIVRequest request);

  static void setup(TestNativeCryptoAPI? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.hash', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.hash was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final HashRequest? arg_request = (args[0] as HashRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hash was null, expected non-null HashRequest.');
          final HashResponse output = api.hash(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.hmac', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.hmac was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final HmacRequest? arg_request = (args[0] as HmacRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.hmac was null, expected non-null HmacRequest.');
          final HmacResponse output = api.hmac(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final GenerateSecureRandomRequest? arg_request = (args[0] as GenerateSecureRandomRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom was null, expected non-null GenerateSecureRandomRequest.');
          final GenerateSecureRandomResponse output = api.generateSecureRandom(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.pbkdf2', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final Pbkdf2Request? arg_request = (args[0] as Pbkdf2Request?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.pbkdf2 was null, expected non-null Pbkdf2Request.');
          final Pbkdf2Response output = api.pbkdf2(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encrypt', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encrypt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final EncryptRequest? arg_request = (args[0] as EncryptRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encrypt was null, expected non-null EncryptRequest.');
          final EncryptResponse output = api.encrypt(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.decrypt', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.decrypt was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DecryptRequest? arg_request = (args[0] as DecryptRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decrypt was null, expected non-null DecryptRequest.');
          final DecryptResponse output = api.decrypt(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encryptFile', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final EncryptFileRequest? arg_request = (args[0] as EncryptFileRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptFile was null, expected non-null EncryptFileRequest.');
          final EncryptFileResponse output = api.encryptFile(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.decryptFile', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final DecryptFileRequest? arg_request = (args[0] as DecryptFileRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.decryptFile was null, expected non-null DecryptFileRequest.');
          final DecryptFileResponse output = api.decryptFile(arg_request!);
          return <Object?>[output];
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV', codec,
          binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMockMessageHandler(null);
      } else {
        channel.setMockMessageHandler((Object? message) async {
          assert(message != null,
          'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final EncryptWithIVRequest? arg_request = (args[0] as EncryptWithIVRequest?);
          assert(arg_request != null,
              'Argument for dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV was null, expected non-null EncryptWithIVRequest.');
          final EncryptResponse output = api.encryptWithIV(arg_request!);
          return <Object?>[output];
        });
      }
    }
  }
}

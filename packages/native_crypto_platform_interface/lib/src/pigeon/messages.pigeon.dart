// Copyright 2019-2023 Hugo Pointcheval
// 
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// --
// Autogenerated from Pigeon (v9.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class HashRequest {
  HashRequest({
    this.data,
    this.algorithm,
  });

  Uint8List? data;

  String? algorithm;

  Object encode() {
    return <Object?>[
      data,
      algorithm,
    ];
  }

  static HashRequest decode(Object result) {
    result as List<Object?>;
    return HashRequest(
      data: result[0] as Uint8List?,
      algorithm: result[1] as String?,
    );
  }
}

class HashResponse {
  HashResponse({
    this.hash,
  });

  Uint8List? hash;

  Object encode() {
    return <Object?>[
      hash,
    ];
  }

  static HashResponse decode(Object result) {
    result as List<Object?>;
    return HashResponse(
      hash: result[0] as Uint8List?,
    );
  }
}

class HmacRequest {
  HmacRequest({
    this.data,
    this.key,
    this.algorithm,
  });

  Uint8List? data;

  Uint8List? key;

  String? algorithm;

  Object encode() {
    return <Object?>[
      data,
      key,
      algorithm,
    ];
  }

  static HmacRequest decode(Object result) {
    result as List<Object?>;
    return HmacRequest(
      data: result[0] as Uint8List?,
      key: result[1] as Uint8List?,
      algorithm: result[2] as String?,
    );
  }
}

class HmacResponse {
  HmacResponse({
    this.hmac,
  });

  Uint8List? hmac;

  Object encode() {
    return <Object?>[
      hmac,
    ];
  }

  static HmacResponse decode(Object result) {
    result as List<Object?>;
    return HmacResponse(
      hmac: result[0] as Uint8List?,
    );
  }
}

class GenerateSecureRandomRequest {
  GenerateSecureRandomRequest({
    this.length,
  });

  int? length;

  Object encode() {
    return <Object?>[
      length,
    ];
  }

  static GenerateSecureRandomRequest decode(Object result) {
    result as List<Object?>;
    return GenerateSecureRandomRequest(
      length: result[0] as int?,
    );
  }
}

class GenerateSecureRandomResponse {
  GenerateSecureRandomResponse({
    this.random,
  });

  Uint8List? random;

  Object encode() {
    return <Object?>[
      random,
    ];
  }

  static GenerateSecureRandomResponse decode(Object result) {
    result as List<Object?>;
    return GenerateSecureRandomResponse(
      random: result[0] as Uint8List?,
    );
  }
}

class Pbkdf2Request {
  Pbkdf2Request({
    this.password,
    this.salt,
    this.length,
    this.iterations,
    this.hashAlgorithm,
  });

  Uint8List? password;

  Uint8List? salt;

  int? length;

  int? iterations;

  String? hashAlgorithm;

  Object encode() {
    return <Object?>[
      password,
      salt,
      length,
      iterations,
      hashAlgorithm,
    ];
  }

  static Pbkdf2Request decode(Object result) {
    result as List<Object?>;
    return Pbkdf2Request(
      password: result[0] as Uint8List?,
      salt: result[1] as Uint8List?,
      length: result[2] as int?,
      iterations: result[3] as int?,
      hashAlgorithm: result[4] as String?,
    );
  }
}

class Pbkdf2Response {
  Pbkdf2Response({
    this.key,
  });

  Uint8List? key;

  Object encode() {
    return <Object?>[
      key,
    ];
  }

  static Pbkdf2Response decode(Object result) {
    result as List<Object?>;
    return Pbkdf2Response(
      key: result[0] as Uint8List?,
    );
  }
}

class EncryptRequest {
  EncryptRequest({
    this.plainText,
    this.key,
    this.algorithm,
  });

  Uint8List? plainText;

  Uint8List? key;

  String? algorithm;

  Object encode() {
    return <Object?>[
      plainText,
      key,
      algorithm,
    ];
  }

  static EncryptRequest decode(Object result) {
    result as List<Object?>;
    return EncryptRequest(
      plainText: result[0] as Uint8List?,
      key: result[1] as Uint8List?,
      algorithm: result[2] as String?,
    );
  }
}

class EncryptResponse {
  EncryptResponse({
    this.cipherText,
  });

  Uint8List? cipherText;

  Object encode() {
    return <Object?>[
      cipherText,
    ];
  }

  static EncryptResponse decode(Object result) {
    result as List<Object?>;
    return EncryptResponse(
      cipherText: result[0] as Uint8List?,
    );
  }
}

class DecryptRequest {
  DecryptRequest({
    this.cipherText,
    this.key,
    this.algorithm,
  });

  Uint8List? cipherText;

  Uint8List? key;

  String? algorithm;

  Object encode() {
    return <Object?>[
      cipherText,
      key,
      algorithm,
    ];
  }

  static DecryptRequest decode(Object result) {
    result as List<Object?>;
    return DecryptRequest(
      cipherText: result[0] as Uint8List?,
      key: result[1] as Uint8List?,
      algorithm: result[2] as String?,
    );
  }
}

class DecryptResponse {
  DecryptResponse({
    this.plainText,
  });

  Uint8List? plainText;

  Object encode() {
    return <Object?>[
      plainText,
    ];
  }

  static DecryptResponse decode(Object result) {
    result as List<Object?>;
    return DecryptResponse(
      plainText: result[0] as Uint8List?,
    );
  }
}

class EncryptFileRequest {
  EncryptFileRequest({
    this.plainTextPath,
    this.cipherTextPath,
    this.key,
    this.algorithm,
  });

  String? plainTextPath;

  String? cipherTextPath;

  Uint8List? key;

  String? algorithm;

  Object encode() {
    return <Object?>[
      plainTextPath,
      cipherTextPath,
      key,
      algorithm,
    ];
  }

  static EncryptFileRequest decode(Object result) {
    result as List<Object?>;
    return EncryptFileRequest(
      plainTextPath: result[0] as String?,
      cipherTextPath: result[1] as String?,
      key: result[2] as Uint8List?,
      algorithm: result[3] as String?,
    );
  }
}

class EncryptFileResponse {
  EncryptFileResponse({
    this.success,
  });

  bool? success;

  Object encode() {
    return <Object?>[
      success,
    ];
  }

  static EncryptFileResponse decode(Object result) {
    result as List<Object?>;
    return EncryptFileResponse(
      success: result[0] as bool?,
    );
  }
}

class DecryptFileRequest {
  DecryptFileRequest({
    this.cipherTextPath,
    this.plainTextPath,
    this.key,
    this.algorithm,
  });

  String? cipherTextPath;

  String? plainTextPath;

  Uint8List? key;

  String? algorithm;

  Object encode() {
    return <Object?>[
      cipherTextPath,
      plainTextPath,
      key,
      algorithm,
    ];
  }

  static DecryptFileRequest decode(Object result) {
    result as List<Object?>;
    return DecryptFileRequest(
      cipherTextPath: result[0] as String?,
      plainTextPath: result[1] as String?,
      key: result[2] as Uint8List?,
      algorithm: result[3] as String?,
    );
  }
}

class DecryptFileResponse {
  DecryptFileResponse({
    this.success,
  });

  bool? success;

  Object encode() {
    return <Object?>[
      success,
    ];
  }

  static DecryptFileResponse decode(Object result) {
    result as List<Object?>;
    return DecryptFileResponse(
      success: result[0] as bool?,
    );
  }
}

class EncryptWithIVRequest {
  EncryptWithIVRequest({
    this.plainText,
    this.iv,
    this.key,
    this.algorithm,
  });

  Uint8List? plainText;

  Uint8List? iv;

  Uint8List? key;

  String? algorithm;

  Object encode() {
    return <Object?>[
      plainText,
      iv,
      key,
      algorithm,
    ];
  }

  static EncryptWithIVRequest decode(Object result) {
    result as List<Object?>;
    return EncryptWithIVRequest(
      plainText: result[0] as Uint8List?,
      iv: result[1] as Uint8List?,
      key: result[2] as Uint8List?,
      algorithm: result[3] as String?,
    );
  }
}

class _NativeCryptoAPICodec extends StandardMessageCodec {
  const _NativeCryptoAPICodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DecryptFileRequest) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is DecryptFileResponse) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else if (value is DecryptRequest) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else if (value is DecryptResponse) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else if (value is EncryptFileRequest) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else if (value is EncryptFileResponse) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else if (value is EncryptRequest) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else if (value is EncryptResponse) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else if (value is EncryptWithIVRequest) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else if (value is GenerateSecureRandomRequest) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else if (value is GenerateSecureRandomResponse) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else if (value is HashRequest) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else if (value is HashResponse) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else if (value is HmacRequest) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else if (value is HmacResponse) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else if (value is Pbkdf2Request) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else if (value is Pbkdf2Response) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return DecryptFileRequest.decode(readValue(buffer)!);
      case 129: 
        return DecryptFileResponse.decode(readValue(buffer)!);
      case 130: 
        return DecryptRequest.decode(readValue(buffer)!);
      case 131: 
        return DecryptResponse.decode(readValue(buffer)!);
      case 132: 
        return EncryptFileRequest.decode(readValue(buffer)!);
      case 133: 
        return EncryptFileResponse.decode(readValue(buffer)!);
      case 134: 
        return EncryptRequest.decode(readValue(buffer)!);
      case 135: 
        return EncryptResponse.decode(readValue(buffer)!);
      case 136: 
        return EncryptWithIVRequest.decode(readValue(buffer)!);
      case 137: 
        return GenerateSecureRandomRequest.decode(readValue(buffer)!);
      case 138: 
        return GenerateSecureRandomResponse.decode(readValue(buffer)!);
      case 139: 
        return HashRequest.decode(readValue(buffer)!);
      case 140: 
        return HashResponse.decode(readValue(buffer)!);
      case 141: 
        return HmacRequest.decode(readValue(buffer)!);
      case 142: 
        return HmacResponse.decode(readValue(buffer)!);
      case 143: 
        return Pbkdf2Request.decode(readValue(buffer)!);
      case 144: 
        return Pbkdf2Response.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NativeCryptoAPI {
  /// Constructor for [NativeCryptoAPI].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NativeCryptoAPI({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NativeCryptoAPICodec();

  Future<HashResponse> hash(HashRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.hash', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as HashResponse?)!;
    }
  }

  Future<HmacResponse> hmac(HmacRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.hmac', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as HmacResponse?)!;
    }
  }

  Future<GenerateSecureRandomResponse> generateSecureRandom(GenerateSecureRandomRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as GenerateSecureRandomResponse?)!;
    }
  }

  Future<Pbkdf2Response> pbkdf2(Pbkdf2Request arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.pbkdf2', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as Pbkdf2Response?)!;
    }
  }

  Future<EncryptResponse> encrypt(EncryptRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.encrypt', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as EncryptResponse?)!;
    }
  }

  Future<DecryptResponse> decrypt(DecryptRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.decrypt', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DecryptResponse?)!;
    }
  }

  Future<EncryptFileResponse> encryptFile(EncryptFileRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.encryptFile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as EncryptFileResponse?)!;
    }
  }

  Future<DecryptFileResponse> decryptFile(DecryptFileRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.decryptFile', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as DecryptFileResponse?)!;
    }
  }

  Future<EncryptResponse> encryptWithIV(EncryptWithIVRequest arg_request) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_request]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as EncryptResponse?)!;
    }
  }
}

// Copyright 2019-2023 Hugo Pointcheval
// 
// Use of this source code is governed by an MIT-style
// license that can be found in the LICENSE file or at
// https://opensource.org/licenses/MIT.
// --
// Autogenerated from Pigeon (v9.2.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package fr.pointcheval.native_crypto_android;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class GeneratedAndroidNativeCrypto {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  private static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HashRequest {
    private @Nullable byte[] data;

    public @Nullable byte[] getData() {
      return data;
    }

    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] data;

      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull HashRequest build() {
        HashRequest pigeonReturn = new HashRequest();
        pigeonReturn.setData(data);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(2);
      toListResult.add(data);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull HashRequest fromList(@NonNull ArrayList<Object> list) {
      HashRequest pigeonResult = new HashRequest();
      Object data = list.get(0);
      pigeonResult.setData((byte[]) data);
      Object algorithm = list.get(1);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HashResponse {
    private @Nullable byte[] hash;

    public @Nullable byte[] getHash() {
      return hash;
    }

    public void setHash(@Nullable byte[] setterArg) {
      this.hash = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] hash;

      public @NonNull Builder setHash(@Nullable byte[] setterArg) {
        this.hash = setterArg;
        return this;
      }

      public @NonNull HashResponse build() {
        HashResponse pigeonReturn = new HashResponse();
        pigeonReturn.setHash(hash);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(hash);
      return toListResult;
    }

    static @NonNull HashResponse fromList(@NonNull ArrayList<Object> list) {
      HashResponse pigeonResult = new HashResponse();
      Object hash = list.get(0);
      pigeonResult.setHash((byte[]) hash);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HmacRequest {
    private @Nullable byte[] data;

    public @Nullable byte[] getData() {
      return data;
    }

    public void setData(@Nullable byte[] setterArg) {
      this.data = setterArg;
    }

    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] data;

      public @NonNull Builder setData(@Nullable byte[] setterArg) {
        this.data = setterArg;
        return this;
      }

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull HmacRequest build() {
        HmacRequest pigeonReturn = new HmacRequest();
        pigeonReturn.setData(data);
        pigeonReturn.setKey(key);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(data);
      toListResult.add(key);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull HmacRequest fromList(@NonNull ArrayList<Object> list) {
      HmacRequest pigeonResult = new HmacRequest();
      Object data = list.get(0);
      pigeonResult.setData((byte[]) data);
      Object key = list.get(1);
      pigeonResult.setKey((byte[]) key);
      Object algorithm = list.get(2);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class HmacResponse {
    private @Nullable byte[] hmac;

    public @Nullable byte[] getHmac() {
      return hmac;
    }

    public void setHmac(@Nullable byte[] setterArg) {
      this.hmac = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] hmac;

      public @NonNull Builder setHmac(@Nullable byte[] setterArg) {
        this.hmac = setterArg;
        return this;
      }

      public @NonNull HmacResponse build() {
        HmacResponse pigeonReturn = new HmacResponse();
        pigeonReturn.setHmac(hmac);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(hmac);
      return toListResult;
    }

    static @NonNull HmacResponse fromList(@NonNull ArrayList<Object> list) {
      HmacResponse pigeonResult = new HmacResponse();
      Object hmac = list.get(0);
      pigeonResult.setHmac((byte[]) hmac);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class GenerateSecureRandomRequest {
    private @Nullable Long length;

    public @Nullable Long getLength() {
      return length;
    }

    public void setLength(@Nullable Long setterArg) {
      this.length = setterArg;
    }

    public static final class Builder {

      private @Nullable Long length;

      public @NonNull Builder setLength(@Nullable Long setterArg) {
        this.length = setterArg;
        return this;
      }

      public @NonNull GenerateSecureRandomRequest build() {
        GenerateSecureRandomRequest pigeonReturn = new GenerateSecureRandomRequest();
        pigeonReturn.setLength(length);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(length);
      return toListResult;
    }

    static @NonNull GenerateSecureRandomRequest fromList(@NonNull ArrayList<Object> list) {
      GenerateSecureRandomRequest pigeonResult = new GenerateSecureRandomRequest();
      Object length = list.get(0);
      pigeonResult.setLength((length == null) ? null : ((length instanceof Integer) ? (Integer) length : (Long) length));
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class GenerateSecureRandomResponse {
    private @Nullable byte[] random;

    public @Nullable byte[] getRandom() {
      return random;
    }

    public void setRandom(@Nullable byte[] setterArg) {
      this.random = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] random;

      public @NonNull Builder setRandom(@Nullable byte[] setterArg) {
        this.random = setterArg;
        return this;
      }

      public @NonNull GenerateSecureRandomResponse build() {
        GenerateSecureRandomResponse pigeonReturn = new GenerateSecureRandomResponse();
        pigeonReturn.setRandom(random);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(random);
      return toListResult;
    }

    static @NonNull GenerateSecureRandomResponse fromList(@NonNull ArrayList<Object> list) {
      GenerateSecureRandomResponse pigeonResult = new GenerateSecureRandomResponse();
      Object random = list.get(0);
      pigeonResult.setRandom((byte[]) random);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Pbkdf2Request {
    private @Nullable byte[] password;

    public @Nullable byte[] getPassword() {
      return password;
    }

    public void setPassword(@Nullable byte[] setterArg) {
      this.password = setterArg;
    }

    private @Nullable byte[] salt;

    public @Nullable byte[] getSalt() {
      return salt;
    }

    public void setSalt(@Nullable byte[] setterArg) {
      this.salt = setterArg;
    }

    private @Nullable Long length;

    public @Nullable Long getLength() {
      return length;
    }

    public void setLength(@Nullable Long setterArg) {
      this.length = setterArg;
    }

    private @Nullable Long iterations;

    public @Nullable Long getIterations() {
      return iterations;
    }

    public void setIterations(@Nullable Long setterArg) {
      this.iterations = setterArg;
    }

    private @Nullable String hashAlgorithm;

    public @Nullable String getHashAlgorithm() {
      return hashAlgorithm;
    }

    public void setHashAlgorithm(@Nullable String setterArg) {
      this.hashAlgorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] password;

      public @NonNull Builder setPassword(@Nullable byte[] setterArg) {
        this.password = setterArg;
        return this;
      }

      private @Nullable byte[] salt;

      public @NonNull Builder setSalt(@Nullable byte[] setterArg) {
        this.salt = setterArg;
        return this;
      }

      private @Nullable Long length;

      public @NonNull Builder setLength(@Nullable Long setterArg) {
        this.length = setterArg;
        return this;
      }

      private @Nullable Long iterations;

      public @NonNull Builder setIterations(@Nullable Long setterArg) {
        this.iterations = setterArg;
        return this;
      }

      private @Nullable String hashAlgorithm;

      public @NonNull Builder setHashAlgorithm(@Nullable String setterArg) {
        this.hashAlgorithm = setterArg;
        return this;
      }

      public @NonNull Pbkdf2Request build() {
        Pbkdf2Request pigeonReturn = new Pbkdf2Request();
        pigeonReturn.setPassword(password);
        pigeonReturn.setSalt(salt);
        pigeonReturn.setLength(length);
        pigeonReturn.setIterations(iterations);
        pigeonReturn.setHashAlgorithm(hashAlgorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(5);
      toListResult.add(password);
      toListResult.add(salt);
      toListResult.add(length);
      toListResult.add(iterations);
      toListResult.add(hashAlgorithm);
      return toListResult;
    }

    static @NonNull Pbkdf2Request fromList(@NonNull ArrayList<Object> list) {
      Pbkdf2Request pigeonResult = new Pbkdf2Request();
      Object password = list.get(0);
      pigeonResult.setPassword((byte[]) password);
      Object salt = list.get(1);
      pigeonResult.setSalt((byte[]) salt);
      Object length = list.get(2);
      pigeonResult.setLength((length == null) ? null : ((length instanceof Integer) ? (Integer) length : (Long) length));
      Object iterations = list.get(3);
      pigeonResult.setIterations((iterations == null) ? null : ((iterations instanceof Integer) ? (Integer) iterations : (Long) iterations));
      Object hashAlgorithm = list.get(4);
      pigeonResult.setHashAlgorithm((String) hashAlgorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class Pbkdf2Response {
    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      public @NonNull Pbkdf2Response build() {
        Pbkdf2Response pigeonReturn = new Pbkdf2Response();
        pigeonReturn.setKey(key);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(key);
      return toListResult;
    }

    static @NonNull Pbkdf2Response fromList(@NonNull ArrayList<Object> list) {
      Pbkdf2Response pigeonResult = new Pbkdf2Response();
      Object key = list.get(0);
      pigeonResult.setKey((byte[]) key);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EncryptRequest {
    private @Nullable byte[] plainText;

    public @Nullable byte[] getPlainText() {
      return plainText;
    }

    public void setPlainText(@Nullable byte[] setterArg) {
      this.plainText = setterArg;
    }

    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] plainText;

      public @NonNull Builder setPlainText(@Nullable byte[] setterArg) {
        this.plainText = setterArg;
        return this;
      }

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull EncryptRequest build() {
        EncryptRequest pigeonReturn = new EncryptRequest();
        pigeonReturn.setPlainText(plainText);
        pigeonReturn.setKey(key);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(plainText);
      toListResult.add(key);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull EncryptRequest fromList(@NonNull ArrayList<Object> list) {
      EncryptRequest pigeonResult = new EncryptRequest();
      Object plainText = list.get(0);
      pigeonResult.setPlainText((byte[]) plainText);
      Object key = list.get(1);
      pigeonResult.setKey((byte[]) key);
      Object algorithm = list.get(2);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EncryptResponse {
    private @Nullable byte[] cipherText;

    public @Nullable byte[] getCipherText() {
      return cipherText;
    }

    public void setCipherText(@Nullable byte[] setterArg) {
      this.cipherText = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] cipherText;

      public @NonNull Builder setCipherText(@Nullable byte[] setterArg) {
        this.cipherText = setterArg;
        return this;
      }

      public @NonNull EncryptResponse build() {
        EncryptResponse pigeonReturn = new EncryptResponse();
        pigeonReturn.setCipherText(cipherText);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(cipherText);
      return toListResult;
    }

    static @NonNull EncryptResponse fromList(@NonNull ArrayList<Object> list) {
      EncryptResponse pigeonResult = new EncryptResponse();
      Object cipherText = list.get(0);
      pigeonResult.setCipherText((byte[]) cipherText);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DecryptRequest {
    private @Nullable byte[] cipherText;

    public @Nullable byte[] getCipherText() {
      return cipherText;
    }

    public void setCipherText(@Nullable byte[] setterArg) {
      this.cipherText = setterArg;
    }

    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] cipherText;

      public @NonNull Builder setCipherText(@Nullable byte[] setterArg) {
        this.cipherText = setterArg;
        return this;
      }

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull DecryptRequest build() {
        DecryptRequest pigeonReturn = new DecryptRequest();
        pigeonReturn.setCipherText(cipherText);
        pigeonReturn.setKey(key);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(3);
      toListResult.add(cipherText);
      toListResult.add(key);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull DecryptRequest fromList(@NonNull ArrayList<Object> list) {
      DecryptRequest pigeonResult = new DecryptRequest();
      Object cipherText = list.get(0);
      pigeonResult.setCipherText((byte[]) cipherText);
      Object key = list.get(1);
      pigeonResult.setKey((byte[]) key);
      Object algorithm = list.get(2);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DecryptResponse {
    private @Nullable byte[] plainText;

    public @Nullable byte[] getPlainText() {
      return plainText;
    }

    public void setPlainText(@Nullable byte[] setterArg) {
      this.plainText = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] plainText;

      public @NonNull Builder setPlainText(@Nullable byte[] setterArg) {
        this.plainText = setterArg;
        return this;
      }

      public @NonNull DecryptResponse build() {
        DecryptResponse pigeonReturn = new DecryptResponse();
        pigeonReturn.setPlainText(plainText);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(plainText);
      return toListResult;
    }

    static @NonNull DecryptResponse fromList(@NonNull ArrayList<Object> list) {
      DecryptResponse pigeonResult = new DecryptResponse();
      Object plainText = list.get(0);
      pigeonResult.setPlainText((byte[]) plainText);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EncryptFileRequest {
    private @Nullable String plainTextPath;

    public @Nullable String getPlainTextPath() {
      return plainTextPath;
    }

    public void setPlainTextPath(@Nullable String setterArg) {
      this.plainTextPath = setterArg;
    }

    private @Nullable String cipherTextPath;

    public @Nullable String getCipherTextPath() {
      return cipherTextPath;
    }

    public void setCipherTextPath(@Nullable String setterArg) {
      this.cipherTextPath = setterArg;
    }

    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable String plainTextPath;

      public @NonNull Builder setPlainTextPath(@Nullable String setterArg) {
        this.plainTextPath = setterArg;
        return this;
      }

      private @Nullable String cipherTextPath;

      public @NonNull Builder setCipherTextPath(@Nullable String setterArg) {
        this.cipherTextPath = setterArg;
        return this;
      }

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull EncryptFileRequest build() {
        EncryptFileRequest pigeonReturn = new EncryptFileRequest();
        pigeonReturn.setPlainTextPath(plainTextPath);
        pigeonReturn.setCipherTextPath(cipherTextPath);
        pigeonReturn.setKey(key);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(plainTextPath);
      toListResult.add(cipherTextPath);
      toListResult.add(key);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull EncryptFileRequest fromList(@NonNull ArrayList<Object> list) {
      EncryptFileRequest pigeonResult = new EncryptFileRequest();
      Object plainTextPath = list.get(0);
      pigeonResult.setPlainTextPath((String) plainTextPath);
      Object cipherTextPath = list.get(1);
      pigeonResult.setCipherTextPath((String) cipherTextPath);
      Object key = list.get(2);
      pigeonResult.setKey((byte[]) key);
      Object algorithm = list.get(3);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EncryptFileResponse {
    private @Nullable Boolean success;

    public @Nullable Boolean getSuccess() {
      return success;
    }

    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    public static final class Builder {

      private @Nullable Boolean success;

      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }

      public @NonNull EncryptFileResponse build() {
        EncryptFileResponse pigeonReturn = new EncryptFileResponse();
        pigeonReturn.setSuccess(success);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(success);
      return toListResult;
    }

    static @NonNull EncryptFileResponse fromList(@NonNull ArrayList<Object> list) {
      EncryptFileResponse pigeonResult = new EncryptFileResponse();
      Object success = list.get(0);
      pigeonResult.setSuccess((Boolean) success);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DecryptFileRequest {
    private @Nullable String cipherTextPath;

    public @Nullable String getCipherTextPath() {
      return cipherTextPath;
    }

    public void setCipherTextPath(@Nullable String setterArg) {
      this.cipherTextPath = setterArg;
    }

    private @Nullable String plainTextPath;

    public @Nullable String getPlainTextPath() {
      return plainTextPath;
    }

    public void setPlainTextPath(@Nullable String setterArg) {
      this.plainTextPath = setterArg;
    }

    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable String cipherTextPath;

      public @NonNull Builder setCipherTextPath(@Nullable String setterArg) {
        this.cipherTextPath = setterArg;
        return this;
      }

      private @Nullable String plainTextPath;

      public @NonNull Builder setPlainTextPath(@Nullable String setterArg) {
        this.plainTextPath = setterArg;
        return this;
      }

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull DecryptFileRequest build() {
        DecryptFileRequest pigeonReturn = new DecryptFileRequest();
        pigeonReturn.setCipherTextPath(cipherTextPath);
        pigeonReturn.setPlainTextPath(plainTextPath);
        pigeonReturn.setKey(key);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(cipherTextPath);
      toListResult.add(plainTextPath);
      toListResult.add(key);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull DecryptFileRequest fromList(@NonNull ArrayList<Object> list) {
      DecryptFileRequest pigeonResult = new DecryptFileRequest();
      Object cipherTextPath = list.get(0);
      pigeonResult.setCipherTextPath((String) cipherTextPath);
      Object plainTextPath = list.get(1);
      pigeonResult.setPlainTextPath((String) plainTextPath);
      Object key = list.get(2);
      pigeonResult.setKey((byte[]) key);
      Object algorithm = list.get(3);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class DecryptFileResponse {
    private @Nullable Boolean success;

    public @Nullable Boolean getSuccess() {
      return success;
    }

    public void setSuccess(@Nullable Boolean setterArg) {
      this.success = setterArg;
    }

    public static final class Builder {

      private @Nullable Boolean success;

      public @NonNull Builder setSuccess(@Nullable Boolean setterArg) {
        this.success = setterArg;
        return this;
      }

      public @NonNull DecryptFileResponse build() {
        DecryptFileResponse pigeonReturn = new DecryptFileResponse();
        pigeonReturn.setSuccess(success);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(success);
      return toListResult;
    }

    static @NonNull DecryptFileResponse fromList(@NonNull ArrayList<Object> list) {
      DecryptFileResponse pigeonResult = new DecryptFileResponse();
      Object success = list.get(0);
      pigeonResult.setSuccess((Boolean) success);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class EncryptWithIVRequest {
    private @Nullable byte[] plainText;

    public @Nullable byte[] getPlainText() {
      return plainText;
    }

    public void setPlainText(@Nullable byte[] setterArg) {
      this.plainText = setterArg;
    }

    private @Nullable byte[] iv;

    public @Nullable byte[] getIv() {
      return iv;
    }

    public void setIv(@Nullable byte[] setterArg) {
      this.iv = setterArg;
    }

    private @Nullable byte[] key;

    public @Nullable byte[] getKey() {
      return key;
    }

    public void setKey(@Nullable byte[] setterArg) {
      this.key = setterArg;
    }

    private @Nullable String algorithm;

    public @Nullable String getAlgorithm() {
      return algorithm;
    }

    public void setAlgorithm(@Nullable String setterArg) {
      this.algorithm = setterArg;
    }

    public static final class Builder {

      private @Nullable byte[] plainText;

      public @NonNull Builder setPlainText(@Nullable byte[] setterArg) {
        this.plainText = setterArg;
        return this;
      }

      private @Nullable byte[] iv;

      public @NonNull Builder setIv(@Nullable byte[] setterArg) {
        this.iv = setterArg;
        return this;
      }

      private @Nullable byte[] key;

      public @NonNull Builder setKey(@Nullable byte[] setterArg) {
        this.key = setterArg;
        return this;
      }

      private @Nullable String algorithm;

      public @NonNull Builder setAlgorithm(@Nullable String setterArg) {
        this.algorithm = setterArg;
        return this;
      }

      public @NonNull EncryptWithIVRequest build() {
        EncryptWithIVRequest pigeonReturn = new EncryptWithIVRequest();
        pigeonReturn.setPlainText(plainText);
        pigeonReturn.setIv(iv);
        pigeonReturn.setKey(key);
        pigeonReturn.setAlgorithm(algorithm);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(4);
      toListResult.add(plainText);
      toListResult.add(iv);
      toListResult.add(key);
      toListResult.add(algorithm);
      return toListResult;
    }

    static @NonNull EncryptWithIVRequest fromList(@NonNull ArrayList<Object> list) {
      EncryptWithIVRequest pigeonResult = new EncryptWithIVRequest();
      Object plainText = list.get(0);
      pigeonResult.setPlainText((byte[]) plainText);
      Object iv = list.get(1);
      pigeonResult.setIv((byte[]) iv);
      Object key = list.get(2);
      pigeonResult.setKey((byte[]) key);
      Object algorithm = list.get(3);
      pigeonResult.setAlgorithm((String) algorithm);
      return pigeonResult;
    }
  }

  private static class NativeCryptoAPICodec extends StandardMessageCodec {
    public static final NativeCryptoAPICodec INSTANCE = new NativeCryptoAPICodec();

    private NativeCryptoAPICodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return DecryptFileRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 129:
          return DecryptFileResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 130:
          return DecryptRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 131:
          return DecryptResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 132:
          return EncryptFileRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 133:
          return EncryptFileResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 134:
          return EncryptRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 135:
          return EncryptResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 136:
          return EncryptWithIVRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 137:
          return GenerateSecureRandomRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 138:
          return GenerateSecureRandomResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 139:
          return HashRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 140:
          return HashResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 141:
          return HmacRequest.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 142:
          return HmacResponse.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 143:
          return Pbkdf2Request.fromList((ArrayList<Object>) readValue(buffer));
        case (byte) 144:
          return Pbkdf2Response.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof DecryptFileRequest) {
        stream.write(128);
        writeValue(stream, ((DecryptFileRequest) value).toList());
      } else if (value instanceof DecryptFileResponse) {
        stream.write(129);
        writeValue(stream, ((DecryptFileResponse) value).toList());
      } else if (value instanceof DecryptRequest) {
        stream.write(130);
        writeValue(stream, ((DecryptRequest) value).toList());
      } else if (value instanceof DecryptResponse) {
        stream.write(131);
        writeValue(stream, ((DecryptResponse) value).toList());
      } else if (value instanceof EncryptFileRequest) {
        stream.write(132);
        writeValue(stream, ((EncryptFileRequest) value).toList());
      } else if (value instanceof EncryptFileResponse) {
        stream.write(133);
        writeValue(stream, ((EncryptFileResponse) value).toList());
      } else if (value instanceof EncryptRequest) {
        stream.write(134);
        writeValue(stream, ((EncryptRequest) value).toList());
      } else if (value instanceof EncryptResponse) {
        stream.write(135);
        writeValue(stream, ((EncryptResponse) value).toList());
      } else if (value instanceof EncryptWithIVRequest) {
        stream.write(136);
        writeValue(stream, ((EncryptWithIVRequest) value).toList());
      } else if (value instanceof GenerateSecureRandomRequest) {
        stream.write(137);
        writeValue(stream, ((GenerateSecureRandomRequest) value).toList());
      } else if (value instanceof GenerateSecureRandomResponse) {
        stream.write(138);
        writeValue(stream, ((GenerateSecureRandomResponse) value).toList());
      } else if (value instanceof HashRequest) {
        stream.write(139);
        writeValue(stream, ((HashRequest) value).toList());
      } else if (value instanceof HashResponse) {
        stream.write(140);
        writeValue(stream, ((HashResponse) value).toList());
      } else if (value instanceof HmacRequest) {
        stream.write(141);
        writeValue(stream, ((HmacRequest) value).toList());
      } else if (value instanceof HmacResponse) {
        stream.write(142);
        writeValue(stream, ((HmacResponse) value).toList());
      } else if (value instanceof Pbkdf2Request) {
        stream.write(143);
        writeValue(stream, ((Pbkdf2Request) value).toList());
      } else if (value instanceof Pbkdf2Response) {
        stream.write(144);
        writeValue(stream, ((Pbkdf2Response) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface NativeCryptoAPI {

    @NonNull 
    HashResponse hash(@NonNull HashRequest request);

    @NonNull 
    HmacResponse hmac(@NonNull HmacRequest request);

    @NonNull 
    GenerateSecureRandomResponse generateSecureRandom(@NonNull GenerateSecureRandomRequest request);

    @NonNull 
    Pbkdf2Response pbkdf2(@NonNull Pbkdf2Request request);

    @NonNull 
    EncryptResponse encrypt(@NonNull EncryptRequest request);

    @NonNull 
    DecryptResponse decrypt(@NonNull DecryptRequest request);

    @NonNull 
    EncryptFileResponse encryptFile(@NonNull EncryptFileRequest request);

    @NonNull 
    DecryptFileResponse decryptFile(@NonNull DecryptFileRequest request);

    @NonNull 
    EncryptResponse encryptWithIV(@NonNull EncryptWithIVRequest request);

    /** The codec used by NativeCryptoAPI. */
    static MessageCodec<Object> getCodec() {
      return NativeCryptoAPICodec.INSTANCE;
    }
    /**Sets up an instance of `NativeCryptoAPI` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NativeCryptoAPI api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.hash", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HashRequest requestArg = (HashRequest) args.get(0);
                try {
                  HashResponse output = api.hash(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.hmac", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                HmacRequest requestArg = (HmacRequest) args.get(0);
                try {
                  HmacResponse output = api.hmac(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.generateSecureRandom", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                GenerateSecureRandomRequest requestArg = (GenerateSecureRandomRequest) args.get(0);
                try {
                  GenerateSecureRandomResponse output = api.generateSecureRandom(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.pbkdf2", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                Pbkdf2Request requestArg = (Pbkdf2Request) args.get(0);
                try {
                  Pbkdf2Response output = api.pbkdf2(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.encrypt", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                EncryptRequest requestArg = (EncryptRequest) args.get(0);
                try {
                  EncryptResponse output = api.encrypt(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.decrypt", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DecryptRequest requestArg = (DecryptRequest) args.get(0);
                try {
                  DecryptResponse output = api.decrypt(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.encryptFile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                EncryptFileRequest requestArg = (EncryptFileRequest) args.get(0);
                try {
                  EncryptFileResponse output = api.encryptFile(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.decryptFile", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                DecryptFileRequest requestArg = (DecryptFileRequest) args.get(0);
                try {
                  DecryptFileResponse output = api.decryptFile(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.NativeCryptoAPI.encryptWithIV", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                EncryptWithIVRequest requestArg = (EncryptWithIVRequest) args.get(0);
                try {
                  EncryptResponse output = api.encryptWithIV(requestArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
